/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/change-role/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_change_role_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/forgot-password/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_forgot_password_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description POST /api/auth/logout
         *     - с телом {"refresh": "<token>"}: выход только с текущего устройства
         *     - без тела: выход со всех устройств */
        post: operations["auth_logout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["auth_me_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me/update/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["auth_me_update_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["auth_me_update_partial_update"];
        trace?: never;
    };
    "/api/auth/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Обновление токенов вручную (альтернатива стандартному TokenRefreshView),
         *     с опциональной ротацией под remember_me.
         *     Body: {"refresh": "<token>", "remember_me": true|false} */
        post: operations["auth_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_register_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/resend-verify/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_resend_verify_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/reset-password/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_reset_password_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/send-otp/phone/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_send_otp_phone_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/verify-email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_verify_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/verify-otp/phone/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_verify_otp_phone_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/geo/suggest/cities/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Подсказки по городам
         * @description Подсказки по городам через Nominatim (OpenStreetMap), ограниченные списком ALLOWED_COUNTRY_CODES.
         */
        get: operations["geo_suggest_cities_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/geo/suggest/countries/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Подсказки по странам
         * @description Подсказки по странам из предзаданного списка ISO_COUNTRIES.
         */
        get: operations["geo_suggest_countries_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/loads/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["loads_retrieve"];
        put: operations["loads_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["loads_partial_update"];
        trace?: never;
    };
    "/api/loads/{uuid}/cancel/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["loads_cancel_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/loads/{uuid}/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["loads_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/loads/board/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["loads_board_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/loads/create/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["loads_create_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/loads/mine/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["loads_mine_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/loads/public/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["loads_public_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Список офферов (видимые текущему пользователю)
         * @description Возвращает офферы, доступные текущему пользователю. Можно уточнить выборку параметром `scope`.
         *
         *     **scope=mine** — как Перевозчик (carrier);
         *     **scope=incoming** — входящие: для Заказчика/Логиста — офферы от перевозчиков; для Перевозчика — инвайты от заказчиков (initiator=CUSTOMER);
         *     **scope=all** — все (только для staff).
         */
        get: operations["offers_list"];
        put?: never;
        /**
         * Создать оффер
         * @description Доступно только Перевозчику/Логисту.
         */
        post: operations["offers_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offers/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Детали оффера
         * @description Доступно перевозчику-автору, владельцу груза или логиcту.
         */
        get: operations["offers_retrieve"];
        /** @description Эндпоинты:
         *       POST   /api/offers/                  — создать (Перевозчик/Логист)
         *       GET    /api/offers/                  — список, видимый текущему пользователю (scope=…)
         *       GET    /api/offers/my/               — мои офферы как Перевозчик (alias)
         *       GET    /api/offers/incoming/         — входящие (alias): заказчик/логист — офферы от перевозчиков; перевозчик — инвайты
         *       GET    /api/offers/{id}/             — детали
         *       POST   /api/offers/{id}/accept/      — принять
         *       POST   /api/offers/{id}/reject/      — отклонить
         *       POST   /api/offers/{id}/counter/     — контр-предложение
         *       POST   /api/offers/invite/           — инвайт (Заказчик → Перевозчик) */
        put: operations["offers_update"];
        post?: never;
        /** @description Эндпоинты:
         *       POST   /api/offers/                  — создать (Перевозчик/Логист)
         *       GET    /api/offers/                  — список, видимый текущему пользователю (scope=…)
         *       GET    /api/offers/my/               — мои офферы как Перевозчик (alias)
         *       GET    /api/offers/incoming/         — входящие (alias): заказчик/логист — офферы от перевозчиков; перевозчик — инвайты
         *       GET    /api/offers/{id}/             — детали
         *       POST   /api/offers/{id}/accept/      — принять
         *       POST   /api/offers/{id}/reject/      — отклонить
         *       POST   /api/offers/{id}/counter/     — контр-предложение
         *       POST   /api/offers/invite/           — инвайт (Заказчик → Перевозчик) */
        delete: operations["offers_destroy"];
        options?: never;
        head?: never;
        /** @description Эндпоинты:
         *       POST   /api/offers/                  — создать (Перевозчик/Логист)
         *       GET    /api/offers/                  — список, видимый текущему пользователю (scope=…)
         *       GET    /api/offers/my/               — мои офферы как Перевозчик (alias)
         *       GET    /api/offers/incoming/         — входящие (alias): заказчик/логист — офферы от перевозчиков; перевозчик — инвайты
         *       GET    /api/offers/{id}/             — детали
         *       POST   /api/offers/{id}/accept/      — принять
         *       POST   /api/offers/{id}/reject/      — отклонить
         *       POST   /api/offers/{id}/counter/     — контр-предложение
         *       POST   /api/offers/invite/           — инвайт (Заказчик → Перевозчик) */
        patch: operations["offers_partial_update"];
        trace?: never;
    };
    "/api/offers/{id}/accept/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Принять оффер
         * @description Акцепт оффера текущим пользователем. При взаимном акцепте создаётся Shipment.
         */
        post: operations["offers_accept_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offers/{id}/counter/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Контр-предложение
         * @description Создать контр-предложение. Разрешено владельцу груза или перевозчику этого оффера.
         */
        post: operations["offers_counter_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offers/{id}/reject/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Отклонить оффер
         * @description Отклонение/снятие оффера любой из сторон. Делает оффер неактивным.
         */
        post: operations["offers_reject_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offers/incoming/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Входящие офферы / инвайты
         * @description Alias к `GET /api/offers/?scope=incoming`.
         *     Заказчик/Логист — видят офферы от перевозчиков на их заявки.
         *     Перевозчик — видит инвайты от заказчиков (initiator=CUSTOMER).
         */
        get: operations["offers_incoming_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offers/invite/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Инвайт перевозчику (Заказчик)
         * @description Заказчик отправляет персональное предложение перевозчику на свой груз.
         */
        post: operations["offers_invite_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offers/my/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Мои офферы (Перевозчик)
         * @description Alias к `GET /api/offers/?scope=mine`.
         */
        get: operations["offers_my_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/orders/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["orders_list"];
        put?: never;
        post: operations["orders_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/orders/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["orders_retrieve"];
        put: operations["orders_update"];
        post?: never;
        delete: operations["orders_destroy"];
        options?: never;
        head?: never;
        patch: operations["orders_partial_update"];
        trace?: never;
    };
    "/api/orders/{id}/documents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description GET  /orders/{id}/documents/ → список документов
         *     POST /orders/{id}/documents/ → загрузка файла (multipart/form-data) */
        get: operations["orders_documents_retrieve"];
        put?: never;
        /** @description GET  /orders/{id}/documents/ → список документов
         *     POST /orders/{id}/documents/ → загрузка файла (multipart/form-data) */
        post: operations["orders_documents_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/orders/{id}/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Обновление статуса (валидация через OrderStatusUpdateSerializer). */
        patch: operations["orders_status_partial_update"];
        trace?: never;
    };
    "/api/schema/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OpenApi3 schema for this API. Format can be selected via content negotiation.
         *
         *     - YAML: application/vnd.oai.openapi
         *     - JSON: application/vnd.oai.openapi+json */
        get: operations["schema_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/cargos/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["search_cargos_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CargoList: {
            /** Format: uuid */
            readonly uuid: string;
            /** Название груза */
            readonly product: string;
            /** Описание */
            readonly description: string;
            readonly origin_country: string;
            readonly origin_city: string;
            readonly origin_address: string;
            readonly destination_country: string;
            readonly destination_city: string;
            readonly destination_address: string;
            /**
             * Дата загрузки
             * Format: date
             */
            readonly load_date: string;
            /**
             * Дата доставки
             * Format: date
             */
            readonly delivery_date: string | null;
            /**
             * @description * `TENT` - Тент
             *     * `CONT` - Контейнер
             *     * `REEFER` - Рефрижератор
             *     * `DUMP` - Самосвал
             *     * `CARTR` - Автотранспортер
             *     * `GRAIN` - Зерновоз
             *     * `LOG` - Лесовоз
             *     * `PICKUP` - Пикап
             *     * `MEGA` - Мега фура
             *     * `OTHER` - Другое
             * @enum {string}
             */
            readonly transport_type: "TENT" | "CONT" | "REEFER" | "DUMP" | "CARTR" | "GRAIN" | "LOG" | "PICKUP" | "MEGA" | "OTHER";
            /** Format: decimal */
            readonly weight_kg: string;
            /** Format: double */
            readonly weight_t: number;
            /** Format: decimal */
            readonly price_value: string | null;
            /**
             * @description * `UZS` - сум
             *     * `KZT` - тнг
             *     * `RUB` - руб
             *     * `USD` - USD
             *     * `EUR` - EUR
             * @enum {string}
             */
            readonly price_currency: "UZS" | "KZT" | "RUB" | "USD" | "EUR";
            /** Format: decimal */
            readonly price_uzs: string;
            /**
             * @description * `email` - Email
             *     * `phone` - Телефон
             *     * `both` - Оба
             * @enum {string}
             */
            readonly contact_pref: "email" | "phone" | "both";
            readonly contact_value: string;
            readonly is_hidden: boolean;
            readonly company_name: string;
            /**
             * @description * `pending` - На модерации
             *     * `approved` - Одобрено
             *     * `rejected` - Отклонено
             * @enum {string}
             */
            readonly moderation_status: "pending" | "approved" | "rejected";
            /**
             * @description * `POSTED` - Опубликована
             *     * `MATCHED` - В работе
             *     * `DELIVERED` - Доставлено
             *     * `COMPLETED` - Завершено
             *     * `CANCELLED` - Отменена
             * @enum {string}
             */
            readonly status: "POSTED" | "MATCHED" | "DELIVERED" | "COMPLETED" | "CANCELLED";
            readonly age_minutes: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly refreshed_at: string;
            readonly has_offers: boolean;
            /** Format: double */
            readonly path_km: number;
            /** Format: double */
            readonly route_km: number | null;
            /** Format: double */
            readonly price_per_km: number;
            /** Format: double */
            readonly origin_dist_km: number;
        };
        CargoPublish: {
            /** Format: uuid */
            readonly uuid: string;
            /** Название груза */
            product: string;
            /** Описание */
            description?: string;
            origin_country?: string;
            origin_city: string;
            origin_address: string;
            destination_country?: string;
            destination_city: string;
            destination_address: string;
            /**
             * Дата загрузки
             * Format: date
             */
            load_date: string;
            /**
             * Дата доставки
             * Format: date
             */
            delivery_date?: string | null;
            /**
             * @description * `TENT` - Тент
             *     * `CONT` - Контейнер
             *     * `REEFER` - Рефрижератор
             *     * `DUMP` - Самосвал
             *     * `CARTR` - Автотранспортер
             *     * `GRAIN` - Зерновоз
             *     * `LOG` - Лесовоз
             *     * `PICKUP` - Пикап
             *     * `MEGA` - Мега фура
             *     * `OTHER` - Другое
             * @enum {string}
             */
            transport_type: "TENT" | "CONT" | "REEFER" | "DUMP" | "CARTR" | "GRAIN" | "LOG" | "PICKUP" | "MEGA" | "OTHER";
            /** Format: decimal */
            weight_kg: string;
            /** Format: decimal */
            price_value?: string | null;
            /**
             * @description * `UZS` - сум
             *     * `KZT` - тнг
             *     * `RUB` - руб
             *     * `USD` - USD
             *     * `EUR` - EUR
             * @enum {string}
             */
            price_currency?: "UZS" | "KZT" | "RUB" | "USD" | "EUR";
            /** Format: decimal */
            readonly price_uzs: string;
            /**
             * @description * `email` - Email
             *     * `phone` - Телефон
             *     * `both` - Оба
             * @enum {string}
             */
            contact_pref: "email" | "phone" | "both";
            is_hidden?: boolean;
            /** Format: double */
            readonly route_km: number | null;
        };
        CargoPublishRequest: {
            /** Название груза */
            product: string;
            /** Описание */
            description?: string;
            origin_country?: string;
            origin_city: string;
            origin_address: string;
            destination_country?: string;
            destination_city: string;
            destination_address: string;
            /**
             * Дата загрузки
             * Format: date
             */
            load_date: string;
            /**
             * Дата доставки
             * Format: date
             */
            delivery_date?: string | null;
            /**
             * @description * `TENT` - Тент
             *     * `CONT` - Контейнер
             *     * `REEFER` - Рефрижератор
             *     * `DUMP` - Самосвал
             *     * `CARTR` - Автотранспортер
             *     * `GRAIN` - Зерновоз
             *     * `LOG` - Лесовоз
             *     * `PICKUP` - Пикап
             *     * `MEGA` - Мега фура
             *     * `OTHER` - Другое
             * @enum {string}
             */
            transport_type: "TENT" | "CONT" | "REEFER" | "DUMP" | "CARTR" | "GRAIN" | "LOG" | "PICKUP" | "MEGA" | "OTHER";
            /** Format: decimal */
            weight_kg: string;
            /** Format: decimal */
            price_value?: string | null;
            /**
             * @description * `UZS` - сум
             *     * `KZT` - тнг
             *     * `RUB` - руб
             *     * `USD` - USD
             *     * `EUR` - EUR
             * @enum {string}
             */
            price_currency?: "UZS" | "KZT" | "RUB" | "USD" | "EUR";
            /**
             * @description * `email` - Email
             *     * `phone` - Телефон
             *     * `both` - Оба
             * @enum {string}
             */
            contact_pref: "email" | "phone" | "both";
            is_hidden?: boolean;
        };
        City: {
            name: string;
            country: string;
            country_code: string;
        };
        CitySuggestResponse: {
            results: components["schemas"]["City"][];
        };
        Country: {
            code: string;
            name: string;
        };
        CountrySuggestResponse: {
            results: components["schemas"]["Country"][];
        };
        ForgotPasswordRequest: {
            /** Format: email */
            email: string;
        };
        ForgotPasswordResponse: {
            detail: string;
        };
        LoginRequest: {
            login: string;
            password: string;
            /** @default false */
            remember_me: boolean;
        };
        LoginResponse: {
            user: components["schemas"]["Me"];
            access: string;
            refresh: string;
        };
        LogoutRequestRequest: {
            refresh?: string;
        };
        LogoutResponse: {
            detail: string;
        };
        Me: {
            readonly id: number;
            /**
             * Имя пользователя
             * @description Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
             */
            readonly username: string;
            /** Format: email */
            readonly email: string;
            /** Имя */
            first_name?: string;
            phone?: string | null;
            company_name?: string;
            /** Format: uri */
            photo?: string | null;
            /**
             * @description * `LOGISTIC` - Логист
             *     * `CUSTOMER` - Заказчик
             *     * `CARRIER` - Перевозчик
             * @enum {string}
             */
            readonly role: "LOGISTIC" | "CUSTOMER" | "CARRIER";
            /** Format: double */
            readonly rating_as_customer: number;
            /** Format: double */
            readonly rating_as_carrier: number;
            readonly is_email_verified: boolean;
            readonly profile: components["schemas"]["Profile"];
        };
        OfferAcceptResponse: {
            detail: string;
            accepted_by_customer: boolean;
            accepted_by_carrier: boolean;
        };
        OfferCounterRequest: {
            /** Format: decimal */
            price_value: string;
            price_currency?: string;
            message?: string;
        };
        /** @description Создание оффера ПЕРЕВОЗЧИКОМ на чужую заявку. */
        OfferCreateRequest: {
            cargo: number;
            /** Format: decimal */
            price_value?: string | null;
            /**
             * @description * `UZS` - сум
             *     * `KZT` - тнг
             *     * `RUB` - руб
             *     * `USD` - USD
             *     * `EUR` - EUR
             * @default UZS
             * @enum {string}
             */
            price_currency: "UZS" | "KZT" | "RUB" | "USD" | "EUR";
            message?: string;
        };
        OfferDetail: {
            readonly id: number;
            /** Format: decimal */
            price_value?: string | null;
            /**
             * @description * `UZS` - сум
             *     * `KZT` - тнг
             *     * `RUB` - руб
             *     * `USD` - USD
             *     * `EUR` - EUR
             * @enum {string}
             */
            price_currency?: "UZS" | "KZT" | "RUB" | "USD" | "EUR";
            message?: string;
            readonly accepted_by_customer: boolean;
            readonly accepted_by_carrier: boolean;
            /**
             * @description * `CUSTOMER` - Заказчик
             *     * `CARRIER` - Перевозчик
             * @enum {string}
             */
            readonly initiator: "CUSTOMER" | "CARRIER";
            /** @default true */
            readonly is_active: boolean;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            cargo: number;
            readonly carrier: number;
        };
        OfferDetailRequest: {
            /** Format: decimal */
            price_value?: string | null;
            /**
             * @description * `UZS` - сум
             *     * `KZT` - тнг
             *     * `RUB` - руб
             *     * `USD` - USD
             *     * `EUR` - EUR
             * @enum {string}
             */
            price_currency?: "UZS" | "KZT" | "RUB" | "USD" | "EUR";
            message?: string;
            cargo: number;
        };
        /** @description Создание оффера-ИНВАЙТА ЗАКАЗЧИКОМ конкретному перевозчику. */
        OfferInviteRequest: {
            cargo: number;
            carrier_id: number;
            /** Format: decimal */
            price_value?: string | null;
            /**
             * @description * `UZS` - сум
             *     * `KZT` - тнг
             *     * `RUB` - руб
             *     * `USD` - USD
             *     * `EUR` - EUR
             * @default UZS
             * @enum {string}
             */
            price_currency: "UZS" | "KZT" | "RUB" | "USD" | "EUR";
            message?: string;
        };
        OfferRejectResponse: {
            detail: string;
        };
        OfferShort: {
            readonly id: number;
            readonly cargo: number;
            readonly cargo_origin: string;
            readonly cargo_destination: string;
            readonly cargo_customer_id: number;
            /** Format: decimal */
            readonly price_value: string | null;
            /**
             * @description * `UZS` - сум
             *     * `KZT` - тнг
             *     * `RUB` - руб
             *     * `USD` - USD
             *     * `EUR` - EUR
             * @enum {string}
             */
            readonly price_currency: "UZS" | "KZT" | "RUB" | "USD" | "EUR";
            readonly message: string;
            readonly accepted_by_customer: boolean;
            readonly accepted_by_carrier: boolean;
            readonly is_active: boolean;
            /** Format: date-time */
            readonly created_at: string;
        };
        OrderDetail: {
            readonly id: number;
            cargo: number;
            readonly cargo_id: number;
            customer: number;
            carrier?: number | null;
            /**
             * @description * `pending` - В ожидании
             *     * `en_route` - В пути
             *     * `delivered` - Доставлен
             *     * `no_driver` - Без водителя
             * @enum {string}
             */
            status: "pending" | "en_route" | "delivered" | "no_driver";
            /**
             * @description * `UZS` - сум
             *     * `KZT` - тнг
             *     * `RUB` - руб
             *     * `USD` - USD
             *     * `EUR` - EUR
             * @enum {string}
             */
            currency: "UZS" | "KZT" | "RUB" | "USD" | "EUR";
            /** Format: decimal */
            price_total?: string;
            /** Format: decimal */
            route_distance_km?: string;
            /** Format: double */
            readonly price_per_km: number;
            /** Format: date-time */
            readonly created_at: string;
            readonly documents: components["schemas"]["OrderDocument"][];
        };
        OrderDetailRequest: {
            cargo: number;
            customer: number;
            carrier?: number | null;
            /**
             * @description * `pending` - В ожидании
             *     * `en_route` - В пути
             *     * `delivered` - Доставлен
             *     * `no_driver` - Без водителя
             * @enum {string}
             */
            status: "pending" | "en_route" | "delivered" | "no_driver";
            /**
             * @description * `UZS` - сум
             *     * `KZT` - тнг
             *     * `RUB` - руб
             *     * `USD` - USD
             *     * `EUR` - EUR
             * @enum {string}
             */
            currency: "UZS" | "KZT" | "RUB" | "USD" | "EUR";
            /** Format: decimal */
            price_total?: string;
            /** Format: decimal */
            route_distance_km?: string;
        };
        OrderDocument: {
            readonly id: number;
            title?: string;
            /** Format: uri */
            file: string;
            readonly file_name: string | null;
            readonly file_size: number | null;
            readonly uploaded_by: string;
            /** Format: date-time */
            readonly created_at: string;
        };
        OrderDocumentRequest: {
            title?: string;
            /** Format: binary */
            file: string;
        };
        OrderList: {
            readonly id: number;
            cargo: number;
            readonly cargo_id: number;
            customer: number;
            carrier?: number | null;
            /**
             * @description * `pending` - В ожидании
             *     * `en_route` - В пути
             *     * `delivered` - Доставлен
             *     * `no_driver` - Без водителя
             * @enum {string}
             */
            status: "pending" | "en_route" | "delivered" | "no_driver";
            /**
             * @description * `UZS` - сум
             *     * `KZT` - тнг
             *     * `RUB` - руб
             *     * `USD` - USD
             *     * `EUR` - EUR
             * @enum {string}
             */
            currency: "UZS" | "KZT" | "RUB" | "USD" | "EUR";
            /** Format: decimal */
            price_total?: string;
            /** Format: decimal */
            route_distance_km?: string;
            /** Format: double */
            readonly price_per_km: number;
            /** Format: date-time */
            readonly created_at: string;
        };
        OrderStatusUpdate: {
            /**
             * @description * `pending` - В ожидании
             *     * `en_route` - В пути
             *     * `delivered` - Доставлен
             *     * `no_driver` - Без водителя
             * @enum {string}
             */
            status: "pending" | "en_route" | "delivered" | "no_driver";
        };
        PaginatedCargoListList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["CargoList"][];
        };
        PaginatedOfferShortList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["OfferShort"][];
        };
        PaginatedOrderListList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["OrderList"][];
        };
        PatchedCargoPublishRequest: {
            /** Название груза */
            product?: string;
            /** Описание */
            description?: string;
            origin_country?: string;
            origin_city?: string;
            origin_address?: string;
            destination_country?: string;
            destination_city?: string;
            destination_address?: string;
            /**
             * Дата загрузки
             * Format: date
             */
            load_date?: string;
            /**
             * Дата доставки
             * Format: date
             */
            delivery_date?: string | null;
            /**
             * @description * `TENT` - Тент
             *     * `CONT` - Контейнер
             *     * `REEFER` - Рефрижератор
             *     * `DUMP` - Самосвал
             *     * `CARTR` - Автотранспортер
             *     * `GRAIN` - Зерновоз
             *     * `LOG` - Лесовоз
             *     * `PICKUP` - Пикап
             *     * `MEGA` - Мега фура
             *     * `OTHER` - Другое
             * @enum {string}
             */
            transport_type?: "TENT" | "CONT" | "REEFER" | "DUMP" | "CARTR" | "GRAIN" | "LOG" | "PICKUP" | "MEGA" | "OTHER";
            /** Format: decimal */
            weight_kg?: string;
            /** Format: decimal */
            price_value?: string | null;
            /**
             * @description * `UZS` - сум
             *     * `KZT` - тнг
             *     * `RUB` - руб
             *     * `USD` - USD
             *     * `EUR` - EUR
             * @enum {string}
             */
            price_currency?: "UZS" | "KZT" | "RUB" | "USD" | "EUR";
            /**
             * @description * `email` - Email
             *     * `phone` - Телефон
             *     * `both` - Оба
             * @enum {string}
             */
            contact_pref?: "email" | "phone" | "both";
            is_hidden?: boolean;
        };
        PatchedOfferDetailRequest: {
            /** Format: decimal */
            price_value?: string | null;
            /**
             * @description * `UZS` - сум
             *     * `KZT` - тнг
             *     * `RUB` - руб
             *     * `USD` - USD
             *     * `EUR` - EUR
             * @enum {string}
             */
            price_currency?: "UZS" | "KZT" | "RUB" | "USD" | "EUR";
            message?: string;
            cargo?: number;
        };
        PatchedOrderDetailRequest: {
            cargo?: number;
            customer?: number;
            carrier?: number | null;
            /**
             * @description * `pending` - В ожидании
             *     * `en_route` - В пути
             *     * `delivered` - Доставлен
             *     * `no_driver` - Без водителя
             * @enum {string}
             */
            status?: "pending" | "en_route" | "delivered" | "no_driver";
            /**
             * @description * `UZS` - сум
             *     * `KZT` - тнг
             *     * `RUB` - руб
             *     * `USD` - USD
             *     * `EUR` - EUR
             * @enum {string}
             */
            currency?: "UZS" | "KZT" | "RUB" | "USD" | "EUR";
            /** Format: decimal */
            price_total?: string;
            /** Format: decimal */
            route_distance_km?: string;
        };
        PatchedOrderStatusUpdateRequest: {
            /**
             * @description * `pending` - В ожидании
             *     * `en_route` - В пути
             *     * `delivered` - Доставлен
             *     * `no_driver` - Без водителя
             * @enum {string}
             */
            status?: "pending" | "en_route" | "delivered" | "no_driver";
        };
        PatchedUpdateMeRequest: {
            /** Имя */
            first_name?: string;
            phone?: string | null;
            company_name?: string;
            /** Format: binary */
            photo?: string | null;
            profile?: components["schemas"]["ProfileRequest"];
        };
        Profile: {
            /** Страна */
            country?: string;
            /** Код страны (ISO-2) */
            country_code?: string;
            /** Регион/область */
            region?: string;
            /** Город */
            city?: string;
        };
        ProfileRequest: {
            /** Страна */
            country?: string;
            /** Код страны (ISO-2) */
            country_code?: string;
            /** Регион/область */
            region?: string;
            /** Город */
            city?: string;
        };
        RefreshResponse: {
            detail: string;
        };
        RefreshResponseRequest: {
            detail: string;
        };
        RegisterRequest: {
            /**
             * Имя пользователя
             * @description Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
             */
            username: string;
            /** Format: email */
            email: string;
            password: string;
            password2: string;
            /** Имя */
            first_name?: string;
            phone: string;
            company_name?: string;
            /**
             * @description * `LOGISTIC` - Логист
             *     * `CUSTOMER` - Заказчик
             *     * `CARRIER` - Перевозчик
             * @enum {string}
             */
            role?: "LOGISTIC" | "CUSTOMER" | "CARRIER";
            country?: string;
            country_code?: string;
            region?: string;
            city?: string;
        };
        RegisterResponse: {
            detail: string;
        };
        ResendVerifyRequest: {
            /** Format: email */
            email: string;
        };
        ResendVerifyResponse: {
            detail: string;
        };
        ResetPasswordRequest: {
            /** Format: email */
            email: string;
            code: string;
            new_password: string;
        };
        ResetPasswordResponse: {
            detail: string;
        };
        RoleChangeRequest: {
            /**
             * @description * `LOGISTIC` - Логист
             *     * `CUSTOMER` - Заказчик
             *     * `CARRIER` - Перевозчик
             * @enum {string}
             */
            role: "LOGISTIC" | "CUSTOMER" | "CARRIER";
        };
        RoleChangeResponse: {
            detail: string;
            role?: string;
        };
        SendPhoneOTPRequest: {
            phone: string;
            /**
             * @description * `verify` - verify
             *     * `reset` - reset
             * @default verify
             * @enum {string}
             */
            purpose: "verify" | "reset";
        };
        SendPhoneOTPResponse: {
            detail: string;
            seconds_left: number;
        };
        TokenRefreshRequestRequest: {
            refresh: string;
            remember_me?: boolean;
        };
        TokenRefreshResponse: {
            access: string;
            refresh: string;
        };
        UpdateMeRequest: {
            /** Имя */
            first_name?: string;
            phone?: string | null;
            company_name?: string;
            /** Format: binary */
            photo?: string | null;
            profile?: components["schemas"]["ProfileRequest"];
        };
        VerifyEmailRequest: {
            /** Format: email */
            email: string;
            code: string;
        };
        VerifyEmailResponse: {
            detail: string;
            access: string;
            refresh: string;
        };
        VerifyPhoneOTPRequest: {
            phone: string;
            code: string;
            /**
             * @description * `verify` - verify
             *     * `reset` - reset
             * @default verify
             * @enum {string}
             */
            purpose: "verify" | "reset";
        };
        VerifyPhoneOTPResponse: {
            verified: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    auth_change_role_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleChangeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RoleChangeRequest"];
                "multipart/form-data": components["schemas"]["RoleChangeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleChangeResponse"];
                };
            };
        };
    };
    auth_forgot_password_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ForgotPasswordRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ForgotPasswordRequest"];
                "multipart/form-data": components["schemas"]["ForgotPasswordRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForgotPasswordResponse"];
                };
            };
        };
    };
    auth_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["LoginRequest"];
                "multipart/form-data": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
        };
    };
    auth_logout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LogoutRequestRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["LogoutRequestRequest"];
                "multipart/form-data": components["schemas"]["LogoutRequestRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogoutResponse"];
                };
            };
        };
    };
    auth_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Me"];
                };
            };
        };
    };
    auth_me_update_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateMeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UpdateMeRequest"];
                "multipart/form-data": components["schemas"]["UpdateMeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Me"];
                };
            };
        };
    };
    auth_me_update_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUpdateMeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUpdateMeRequest"];
                "multipart/form-data": components["schemas"]["PatchedUpdateMeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Me"];
                };
            };
        };
    };
    auth_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefreshRequestRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefreshRequestRequest"];
                "multipart/form-data": components["schemas"]["TokenRefreshRequestRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefreshResponse"];
                };
            };
        };
    };
    auth_register_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RegisterRequest"];
                "multipart/form-data": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterResponse"];
                };
            };
        };
    };
    auth_resend_verify_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResendVerifyRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ResendVerifyRequest"];
                "multipart/form-data": components["schemas"]["ResendVerifyRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResendVerifyResponse"];
                };
            };
        };
    };
    auth_reset_password_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetPasswordRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ResetPasswordRequest"];
                "multipart/form-data": components["schemas"]["ResetPasswordRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResetPasswordResponse"];
                };
            };
        };
    };
    auth_send_otp_phone_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendPhoneOTPRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SendPhoneOTPRequest"];
                "multipart/form-data": components["schemas"]["SendPhoneOTPRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendPhoneOTPResponse"];
                };
            };
        };
    };
    auth_verify_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyEmailRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["VerifyEmailRequest"];
                "multipart/form-data": components["schemas"]["VerifyEmailRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VerifyEmailResponse"];
                };
            };
        };
    };
    auth_verify_otp_phone_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyPhoneOTPRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["VerifyPhoneOTPRequest"];
                "multipart/form-data": components["schemas"]["VerifyPhoneOTPRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VerifyPhoneOTPResponse"];
                };
            };
        };
    };
    geo_suggest_cities_retrieve: {
        parameters: {
            query: {
                /** @description ISO-2 код страны для фильтра (необязательно). Допустимые: AF, AM, AZ, BG, BY, CN, GE, GR, HU, IN, IR, KG, KZ, MN, PK, PL, RO, RS, RU, TJ, TM, TR, UA, UZ */
                country?: string;
                /** @description Максимум результатов (1..50, по умолчанию 10) */
                limit?: number;
                /** @description Строка поиска (минимум 2 символа) */
                q: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CitySuggestResponse"];
                };
            };
        };
    };
    geo_suggest_countries_retrieve: {
        parameters: {
            query?: {
                /** @description Максимум результатов (1..50, по умолчанию 10) */
                limit?: number;
                /** @description Код страны (ISO-2) или часть названия */
                q?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CountrySuggestResponse"];
                };
            };
        };
    };
    loads_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CargoPublish"];
                };
            };
        };
    };
    loads_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CargoPublishRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CargoPublishRequest"];
                "multipart/form-data": components["schemas"]["CargoPublishRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CargoPublish"];
                };
            };
        };
    };
    loads_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCargoPublishRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCargoPublishRequest"];
                "multipart/form-data": components["schemas"]["PatchedCargoPublishRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CargoPublish"];
                };
            };
        };
    };
    loads_cancel_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshResponseRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RefreshResponseRequest"];
                "multipart/form-data": components["schemas"]["RefreshResponseRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefreshResponse"];
                };
            };
        };
    };
    loads_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshResponseRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RefreshResponseRequest"];
                "multipart/form-data": components["schemas"]["RefreshResponseRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefreshResponse"];
                };
            };
        };
    };
    loads_board_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCargoListList"];
                };
            };
        };
    };
    loads_create_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CargoPublishRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CargoPublishRequest"];
                "multipart/form-data": components["schemas"]["CargoPublishRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CargoPublish"];
                };
            };
        };
    };
    loads_mine_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCargoListList"];
                };
            };
        };
    };
    loads_public_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCargoListList"];
                };
            };
        };
    };
    offers_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description mine | incoming | all (только staff) */
                scope?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedOfferShortList"];
                };
            };
        };
    };
    offers_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OfferCreateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OfferCreateRequest"];
                "multipart/form-data": components["schemas"]["OfferCreateRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferDetail"];
                };
            };
        };
    };
    offers_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this offer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferDetail"];
                };
            };
        };
    };
    offers_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this offer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OfferDetailRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OfferDetailRequest"];
                "multipart/form-data": components["schemas"]["OfferDetailRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferDetail"];
                };
            };
        };
    };
    offers_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this offer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    offers_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this offer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedOfferDetailRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedOfferDetailRequest"];
                "multipart/form-data": components["schemas"]["PatchedOfferDetailRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferDetail"];
                };
            };
        };
    };
    offers_accept_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this offer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferAcceptResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    offers_counter_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this offer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OfferCounterRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OfferCounterRequest"];
                "multipart/form-data": components["schemas"]["OfferCounterRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferDetail"];
                };
            };
        };
    };
    offers_reject_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this offer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferRejectResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    offers_incoming_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedOfferShortList"];
                };
            };
        };
    };
    offers_invite_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OfferInviteRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OfferInviteRequest"];
                "multipart/form-data": components["schemas"]["OfferInviteRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferDetail"];
                };
            };
        };
    };
    offers_my_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedOfferShortList"];
                };
            };
        };
    };
    orders_list: {
        parameters: {
            query?: {
                cargo?: number;
                date_from?: string;
                date_to?: string;
                load?: number;
                /** @description A page number within the paginated result set. */
                page?: number;
                role?: string;
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedOrderListList"];
                };
            };
        };
    };
    orders_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderDetailRequest"];
                "multipart/form-data": components["schemas"]["OrderDetailRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderDetailRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderDetail"];
                };
            };
        };
    };
    orders_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Заказ. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderDetail"];
                };
            };
        };
    };
    orders_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Заказ. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderDetailRequest"];
                "multipart/form-data": components["schemas"]["OrderDetailRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderDetailRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderDetail"];
                };
            };
        };
    };
    orders_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Заказ. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    orders_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Заказ. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedOrderDetailRequest"];
                "multipart/form-data": components["schemas"]["PatchedOrderDetailRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedOrderDetailRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderDetail"];
                };
            };
        };
    };
    orders_documents_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Заказ. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderDetail"];
                };
            };
        };
    };
    orders_documents_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Заказ. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderDocumentRequest"];
                "multipart/form-data": components["schemas"]["OrderDocumentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderDocumentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderDocument"];
                };
            };
        };
    };
    orders_status_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Заказ. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedOrderStatusUpdateRequest"];
                "multipart/form-data": components["schemas"]["PatchedOrderStatusUpdateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedOrderStatusUpdateRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderStatusUpdate"];
                };
            };
        };
    };
    schema_retrieve: {
        parameters: {
            query?: {
                format?: "json" | "yaml";
                lang?: "af" | "ar" | "ar-dz" | "ast" | "az" | "be" | "bg" | "bn" | "br" | "bs" | "ca" | "ckb" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "en-au" | "en-gb" | "eo" | "es" | "es-ar" | "es-co" | "es-mx" | "es-ni" | "es-ve" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "pt-br" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sr-latn" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "uk" | "ur" | "uz" | "vi" | "zh-hans" | "zh-hant";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.oai.openapi": {
                        [key: string]: unknown;
                    };
                    "application/yaml": {
                        [key: string]: unknown;
                    };
                    "application/vnd.oai.openapi+json": {
                        [key: string]: unknown;
                    };
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    search_cargos_list: {
        parameters: {
            query?: {
                destination_city?: string;
                origin_city?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCargoListList"];
                };
            };
        };
    };
}
